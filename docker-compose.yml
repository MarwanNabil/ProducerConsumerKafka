version: "3"
services:
  producer:
    build: ./producer
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BROKER_URL=kafka:9092
      - KAFKA_TOPIC="offers"
    depends_on:
      - kafka
      - zookeeper
    networks:
      - my-network

  consumer:
    build: ./consumer
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_URL: kafka:9092
      KAFKA_TOPIC: "offers"
      MONGO_URI: "mongodb://mongoDB:27017/offers"
    depends_on:
      - kafka
      - zookeeper
    networks:
      - my-network

  mongoDB:
    container_name: "MongoDB"
    image: mongo:latest
    restart: always
    volumes:
      - mongoDB:/data/db

  kafka:
    image: "bitnami/kafka:3"
    container_name: "kafka"
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "offers"
      KAFKA_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT , PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      BITNAMI_DEBUG: true
    networks:
      - my-network
    depends_on:
      - zookeeper

  zookeeper:
    image: "zookeeper:3.6.3"
    ports:
      - "2181:2181"
    environment:
      BITNAMI_DEBUG: true
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - my-network

volumes:
  mongoDB: {}

networks:
  my-network:
    driver: bridge
